version: "3.8"
services:
   postgres:
      image: postgres:latest
      env_file: "./postgres/.env.file"
      volumes:
         - postgres:/data/postgres
      ports:
         - "5432:5432"
      networks:
         - unifarm
      deploy:
         mode: "replicated"
         replicas: 3
         placement:
            max_replicas_per_node: 2
         restart_policy:
            condition: on-failure
   graph:
      image: graph:latest
      env_file: "./env.prod"
      volumes:
         - graph:/graph
      networks:
         - unifarm
      command: npm run graph:start   
      deploy:
         mode: "replicated"
         replicas: 3
         placement:
            max_replicas_per_node: 1
         restart_policy:
            condition: on-failure
   eth-events-sync:
      image: events-listener:latest
      env_file: "./env.prod"
      environment:
         - CHAIN_ID=4
      volumes:
         - eth_events:/events
      networks:
         - unifarm
      command: npm run listener-server:start   
      deploy:
         mode: "replicated"
         replicas: 2
         placement:
            max_replicas_per_node: 1
         restart_policy:
            condition: on-failure
   bsc-events-sync:
      image: events-listener:latest
      env_file: "./env.prod"
      environment:
         - CHAIN_ID=97
      volumes:
         - bsc_events:/events
      networks:
         - unifarm
      command: npm run listener-server:start    
      deploy:
         mode: "replicated"
         replicas: 2
         placement:
            max_replicas_per_node: 1
         restart_policy:
            condition: on-failure

   polygon-events-sync:
      image: events-listener:latest
      env_file: "./env.prod"
      environment:
         - CHAIN_ID=80001
      volumes:
         - polygon_events:/events
      networks:
         - unifarm
      command: npm run listener-server:start    
      deploy:
         mode: "replicated"
         replicas: 2
         placement:
            max_replicas_per_node: 1
         restart_policy:
            condition: on-failure
   redis:
      image: redis:latest
      volumes:
         - redis:/data
      ports:
         - "6379:6379"
      networks:
         - unifarm
      command: redis-server --appendonly yes  --requirepass ${REDIS_PASSWORD}   
      deploy:
         mode: "replicated"
         replicas: 1
         placement:
            constraints:
               - "node.role==manager"
         restart_policy:
            condition: on-failure

   graph_nginx:
       image: nginx:latest
       ports:
         - "80:80"
         - "443:443"
       networks:
         - unifarm
       volumes:
         - /nginx/graph.unifarm.co.conf:/etc/nginx/conf.d
         - certbot-etc:/etc/letsencrypt
         - certbot-var:/var/lib/letsencrypt
         - dhparam:/etc/ssl/certs  
       deploy:
         mode: "replicated"
         restart_policy:
            condition: on-failure

   certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - graph_nginx
    command: certonly --dry-run -m bhupendra.bisht@oropocket.com --agree-tos --no-eff-email -d graph.unifarm.co
         
networks:
   unifarm:
volumes:
   postgres:
   graph:
   eth_events:
   bsc_events:
   polygon_events:
   certbot-etc:
   certbot-var:
   dhparam:         
