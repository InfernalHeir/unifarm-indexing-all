version: "3.8"
services:
   postgres:
      image: postgres:latest
      env_file: "./postgres/.env.file"
      volumes:
         - postgres-data:/data/postgres
      ports:
          - "0.0.0.0:5432:5432"
      networks:
         - unifarm
      deploy:
         mode: "replicated"
         replicas: 3
         placement:
            max_replicas_per_node: 2
         restart_policy:
            condition: on-failure
   graph:
      image: graph:latest
      env_file: "./.env.prod"
      volumes:
         - graph:/graph
      ports:
         - "0.0.0.0:8080:8080"   
      networks:
         - unifarm
      command: ["run","graph:start"]
      depends_on:
         - postgres   
      deploy:
         mode: "replicated"
         replicas: 3
         placement:
            max_replicas_per_node: 2
         restart_policy:
            condition: on-failure
   eth-events-sync:
      image: events-listener:latest
      env_file: "./.env.prod"
      environment:
         - CHAIN_ID=4
      volumes:
         - eth_events:/events
      networks:
         - unifarm
      command: ["run","listener-server:start"]
      depends_on:
         - postgres      
      deploy:
         mode: "replicated"
         replicas: 2
         placement:
            max_replicas_per_node: 1
         restart_policy:
            condition: on-failure
      restart: "on-failure"      
   bsc-events-sync:
      image: events-listener:latest
      env_file: "./.env.prod"
      environment:
         - CHAIN_ID=97
      volumes:
         - bsc_events:/events
      networks:
         - unifarm
      command: ["run","listener-server:start"]    
      depends_on:
         - postgres
      deploy:
         mode: "replicated"
         replicas: 2
         placement:
            max_replicas_per_node: 1
         restart_policy:
            condition: on-failure

   polygon-events-sync:
      image: events-listener:latest
      env_file: "./.env.prod"
      environment:
         - CHAIN_ID=80001
      volumes:
         - polygon_events:/events
      networks:
         - unifarm
      command: ["run","listener-server:start"]
      depends_on:
         - postgres     
      deploy:
         mode: "replicated"
         replicas: 2
         placement:
            max_replicas_per_node: 1
         restart_policy:
            condition: on-failure
   redis:
      image: redis:latest
      volumes:
         - redis-data:/data
      ports:
         - "6379:6379"
      networks:
         - unifarm
      command: redis-server --appendonly yes  --requirepass ${REDIS_PASSWORD}   
      deploy:
         mode: "replicated"
         replicas: 1
         placement:
            constraints:
               - "node.role==manager"
         restart_policy:
            condition: on-failure        
networks:
   unifarm:
volumes:
   postgres-data:
   graph:
   eth_events:
   bsc_events:
   polygon_events:
   redis-data:
